//##############################################################################################################################
// Realm Crafter Professional																									
// Copyright (C) 2013 Solstar Games, LLC. All rights reserved																	
// contact@solstargames.com																																																		
//
// Grand Poohbah: Mark Bryant
// Programmer: Jared Belkus
// Programmer: Frank Puig Placeres
// Programmer: Rob Williams
// 																										
// Program: 
//																																
//This is a licensed product:
//BY USING THIS SOURCECODE, YOU ARE CONFIRMING YOUR ACCEPTANCE OF THE SOFTWARE AND AGREEING TO BECOME BOUND BY THE TERMS OF 
//THIS AGREEMENT. IF YOU DO NOT AGREE TO BE BOUND BY THESE TERMS, THEN DO NOT USE THE SOFTWARE.
//																		
//Licensee may NOT: 
// (i)   create any derivative works of the Engine, including translations Or localizations, other than Games;
// (ii)  redistribute, encumber, sell, rent, lease, sublicense, Or otherwise transfer rights To the Engine// or
// (iii) remove Or alter any trademark, logo, copyright Or other proprietary notices, legends, symbols Or labels in the Engine.
// (iv)   licensee may Not distribute the source code Or documentation To the engine in any manner, unless recipient also has a 
//       license To the Engine.													
// (v)  use the Software to develop any software or other technology having the same primary function as the Software, 
//       including but not limited to using the Software in any development or test procedure that seeks to develop like 
//       software or other technology, or to determine if such software or other technology performs in a similar manner as the
//       Software																																
//##############################################################################################################################
#pragma once

#include "NBBDX.h"

void smokinhot_(int a, int b, int c, int d)
{
	smokinhot(a, b, 0, c, d);
}

extern "C" _declspec(dllexport) void* bbdx2_GetIDirect3DDevice9();
extern "C" _declspec(dllexport) void* bbdx2_GetNxScene();
extern "C" _declspec(dllexport) void* bbdx2_GetNxPhysicsSDK();

struct BBDXCommandData
{
	typedef int (tChannelPlayingfn)(uint channel);
	typedef int (tEmitSoundfn)(uint sound, uint entity);
	typedef int (tPlaySoundfn)(uint sound);
	typedef int (tLoadSoundfn)(const char* path);
	typedef int (tLoad3DSoundfn)(const char* path);
	typedef int (tPlayMusicfn)(const char* path);
	typedef void (tChannelVolumefn)(uint channel, float level);
	typedef void (tFreeSoundfn)(uint sound);
	typedef void (tLoopSoundfn)(uint sound);
	typedef void (tSoundVolumefn)(uint sound, float level);
	typedef void (tStopChannelfn)(uint channel);
	typedef void (tPauseChannelfn)(uint channel);
	typedef void (tResumeChannelfn)(uint channel);
	typedef void (tChannelPanfn)(uint channel, float pan);
	typedef void (tFreeEntityfn)(int entity);
	typedef float (tMeshWidthfn)(int entity);
	typedef float (tMeshHeightfn)(int entity);
	typedef float (tMeshDepthfn)(int entity);
	typedef int (tCreatePointLightfn)();
	typedef int (tCreateDirectionalLightfn)();
	typedef void (tSetLightPositionfn)(int light, float x, float y, float z);
	typedef void (tSetLightDirectionfn)(int light, float x, float y, float z);
	typedef void (tSetLightRadiusfn)(int light, float radius);
	typedef void (tSetPLightColorfn)(int light, int r, int g, int b);
	typedef void (tSetDLightColorfn)(int light, int r, int g, int b);
	typedef void (tAmbientLightfn)(int r, int g, int b);
	typedef void (tSetPLightActivefn)(int light, int active);
	typedef void (tSetDLightActivefn)(int light, int active);
	typedef void (tFreePLightfn)(int light);
	typedef void (tFreeDLightfn)(int light);
	typedef void (tUpdateHardwareBuffersfn)(int entity);
	typedef int (tCreateCamerafn)(int parent);
	typedef int (tLoadMeshfn)(const char* path, int parent, int animated, bbdx2_ASyncJobFn completionCallback, void* userData);
	typedef int (tCreatePivotfn)(int parent);
	typedef void (tPositionEntityfn)(int entity, float x, float y, float z, int global );
	typedef void (tTranslateEntityfn)(int entity, float x, float y, float z, int global );
	typedef void (tRotateEntityfn)(int entity, float x, float y, float z, int global );
	typedef void (tScaleEntityfn)(int entity, float x, float y, float z, int global );
	typedef void (tMoveEntityfn)(int entity, float x, float y, float z);
	typedef void (tTurnEntityfn)(int entity, float x, float y, float z);
	typedef void (tPointEntityfn)(int entity, int target, float zero );
	typedef void (tEntityOrderfn)(int entity, int order);
	typedef void (tCameraClsColorfn)(int camera, int r, int g, int b);
	typedef void (tEntityFXfn)(int entity, int fx);
	typedef void (tEntityAlphaNoSolidfn)(int entity, float alpha);
	typedef int (tLoadShaderfn)(const char* path);
	typedef void (tEntityShaderfn)(int entity, int shader);
	typedef void (tHideEntityfn)(int entity);
	typedef void (tHideEntityKeepCollisionsfn)(int entity);
	typedef void (tShowEntityfn)(int entity);
	typedef int (tCopyEntityfn)(int entity, int parent );
	typedef float (tEntityXfn)(int entity, int global );
	typedef float (tEntityYfn)(int entity, int global );
	typedef float (tEntityZfn)(int entity, int global );
	typedef float (tEntityScaleXfn)(int entity, int global );
	typedef float (tEntityScaleYfn)(int entity, int global );
	typedef float (tEntityScaleZfn)(int entity, int global );
	typedef float (tEntityPitchfn)(int entity, int global );
	typedef float (tEntityYawfn)(int entity, int global );
	typedef float (tEntityRollfn)(int entity, int global );
	typedef void (tEntityAlphafn)(int entity, float alpha);
	typedef void (tAlignToVectorfn)(int entity, float x, float y, float z, int axis);
	typedef char* (tEntityClassfn)(int entity);
	typedef int (tCountChildrenfn)(int entity);
	typedef int (tGetChildfn)(int entity, int index);
	typedef int (tGetParentfn)(int entity);
	typedef void (tEntityParentfn)(int entity, int parent, int global );
	typedef int (tLoadTexturefn)(const char* path, int flags);
	typedef void (tEntityTexturefn)(int entity, int texture, int index , int surface );
	typedef void (tFreeTexturefn)(int texture);
	typedef void (tTFormVectorfn)(float x, float y, float z, int w1, int w2);
	typedef void (tTFormPointfn)(float x, float y, float z, int w1, int w2);
	typedef float (tTFormedXfn)();
	typedef float (tTFormedYfn)();
	typedef float (tTFormedZfn)();
	typedef char* (tEntityNamefn)(int entity);
	typedef void (tEntityTypefn)(uint entity, int type);
	typedef int (tGetEntityTypefn)(uint entity);
	typedef void (tEntityRadiusfn)(uint entity, float width, float height );
	typedef void (tSetCollisionMeshfn)(uint entity);
	typedef void (tResetEntityfn)(uint entity);
	typedef int (tCountCollisionsfn)(uint entity);
	typedef float (tCollisionXfn)(uint entity, int index);
	typedef float (tCollisionYfn)(uint entity, int index);
	typedef float (tCollisionZfn)(uint entity, int index);
	typedef float (tCollisionNXfn)(uint entity, int index);
	typedef float (tCollisionNYfn)(uint entity, int index);
	typedef float (tCollisionNZfn)(uint entity, int index);
	typedef void (tEntityPickModefn)(uint entity, int mode);
	typedef uint (tLinePickfn)(float x, float y, float z, float destX, float destY, float destZ, float radius );
	typedef uint (tCameraPickfn)(int x, int y);
	typedef float (tPickedXfn)();
	typedef float (tPickedYfn)();
	typedef float (tPickedZfn)();
	typedef float (tPickedNXfn)();
	typedef float (tPickedNYfn)();
	typedef float (tPickedNZfn)();
	typedef void (tNameEntityfn)(int entity, const char* name);
	typedef void (tTagEntityfn)(int entity, const char* tag);
	typedef const char* (tEntityTagfn)(int entity);
	typedef int (tAnimatingfn)(int entity);
	typedef int (tAnimLengthfn)(int entity);
	typedef int (tAnimSeqfn)(int entity);
	typedef float (tAnimTimefn)(int entity);
	typedef int (tCopyTexturefn)(int oldTexture);
	typedef int (tFindChildfn)(int entity, const char* name);
	typedef void (tFlipMeshfn)(int entity);
	typedef int (tGraphicsHeightfn)();
	typedef int (tGraphicsWidthfn)();
	typedef float (tQueryBoxfn)(int entity, int index, int xyz);
	typedef float (tTextureWidthfn)(int texture);
	typedef float (tTextureHeightfn)(int texture);
	typedef char* (tTextureNamefn)(int texture);
	typedef void (tEntityConstantFloatfn)(uint entity, const char* name, float v0);
	typedef void (tEntityConstantFloat2fn)(uint entity, const char* name, float v0, float v1);
	typedef void (tEntityConstantFloat3fn)(uint entity, const char* name, float v0, float v1, float v2);
	typedef void (tEntityConstantFloat4fn)(uint entity, const char* name, float v0, float v1, float v2, float v3);
	typedef void (tGlobalShaderConstantFloat4fn)(const char* name, float v0, float v1, float v2, float v3);
	typedef void (tCalculateB3DTangentsfn)(int entity);
	typedef uint (tCreateLinefn)(uint parent);
	typedef void (tFreeLinefn)(uint line);
	typedef void (tSetLineSizefn)(uint line, float startX, float startY, float startZ, float endX, float endY, float endZ);
	typedef void (tSetLineColorfn)(uint line, int r, int g, int b);
	typedef void (tSetLineVisiblefn)(uint line, bool visible);
	typedef uint (tLoadProfilefn)(const char* path);
	typedef uint (tCreateProfilefn)(const char* name);
	typedef void (tFreeProfilefn)(uint profile);
	typedef void (tSetProfileRangefn)(uint profile, float range);
	typedef float (tGetProfileRangefn)(uint profile);
	typedef void (tSetProfileEffectfn)(uint profile, int qualityLevel, int distance, uint effect);
	typedef uint (tGetProfileEffectfn)(uint profile, int qualityLevel, int distance);
	typedef void (tEntityProfilefn)(int entity, int profile);
	typedef uint (tCreatePhysicsDescfn)(int isStatic, uint node);
	typedef void (tAddSpherefn)(uint desc, float x, float y, float z, float radius, float mass);
	typedef void (tAddCapsulefn)(uint desc, float x, float y, float z, float width, float height, float mass);
	typedef void (tAddBoxfn)(uint desc, float x, float y, float z, float width, float height, float depth, float mass);
	typedef void (tClosePhysicsDescfn)(uint desc);
	typedef void (tCameraFogColorfn)(uint camera, int r, int g, int b);
	typedef void (tCameraFogRangefn)(uint camera, float near, float far);
	typedef void (tCameraRangefn)(uint camera, float near, float far);
	typedef void (tScaleMeshfn)(uint entity, float x, float y, float z);
	typedef uint (tCreateMeshfn)(uint parent);
	typedef uint (tCreateSurfacefn)(uint mesh);
	typedef uint (tAddVertexfn)(uint surface, float x, float y, float z, float u, float v, float w);
	typedef void(tVertexNormalfn)(int surface, int index, float nx, float ny, float nz);
	typedef uint (tAddTrianglefn)(uint surface, uint v0, uint v1, uint v2);
	typedef void* (tGetIDirect3DDevice9fn)();
	typedef void* (tbbdx2_GetNxScenefn)();
	typedef void* (tbbdx2_GetNxPhysicsSDKfn)();


	tChannelPlayingfn* ChannelPlaying;
	tEmitSoundfn* EmitSound;
	tPlaySoundfn* PlaySound;
	tLoadSoundfn* LoadSound;
	tLoad3DSoundfn* Load3DSound;
	tPlayMusicfn* PlayMusic;
	tChannelVolumefn* ChannelVolume;
	tFreeSoundfn* FreeSound;
	tLoopSoundfn* LoopSound;
	tSoundVolumefn* SoundVolume;
	tStopChannelfn* StopChannel;
	tPauseChannelfn* PauseChannel;
	tResumeChannelfn* ResumeChannel;
	tChannelPanfn* ChannelPan;
	tFreeEntityfn* FreeEntity;
	tMeshWidthfn* MeshWidth;
	tMeshHeightfn* MeshHeight;
	tMeshDepthfn* MeshDepth;
	tCreatePointLightfn* CreatePointLight;
	tCreateDirectionalLightfn* CreateDirectionalLight;
	tSetLightPositionfn* SetLightPosition;
	tSetLightDirectionfn* SetLightDirection;
	tSetLightRadiusfn* SetLightRadius;
	tSetPLightColorfn* SetPLightColor;
	tSetDLightColorfn* SetDLightColor;
	tSetPLightActivefn* SetPLightActive;
	tSetDLightActivefn* SetDLightActive;
	tFreePLightfn* FreePLight;
	tFreeDLightfn* FreeDLight;
	tUpdateHardwareBuffersfn* UpdateHardwareBuffers;
	tCreateCamerafn* CreateCamera;
	tLoadMeshfn* LoadMesh;
	tCreatePivotfn* CreatePivot;
	tPositionEntityfn* PositionEntity;
	tTranslateEntityfn* TranslateEntity;
	tRotateEntityfn* RotateEntity;
	tScaleEntityfn* ScaleEntity;
	tMoveEntityfn* MoveEntity;
	tTurnEntityfn* TurnEntity;
	tPointEntityfn* PointEntity;
	tEntityOrderfn* EntityOrder;
	tCameraClsColorfn* CameraClsColor;
	tEntityFXfn* EntityFX;
	tEntityAlphaNoSolidfn* EntityAlphaNoSolid;
	tLoadShaderfn* LoadShader;
	tEntityShaderfn* EntityShader;
	tHideEntityfn* HideEntity;
	tHideEntityKeepCollisionsfn* HideEntityKeepCollisions;
	tShowEntityfn* ShowEntity;
	tCopyEntityfn* CopyEntity;
	tEntityXfn* EntityX;
	tEntityYfn* EntityY;
	tEntityZfn* EntityZ;
	tEntityScaleXfn* EntityScaleX;
	tEntityScaleYfn* EntityScaleY;
	tEntityScaleZfn* EntityScaleZ;
	tEntityPitchfn* EntityPitch;
	tEntityYawfn* EntityYaw;
	tEntityRollfn* EntityRoll;
	tEntityAlphafn* EntityAlpha;
	tAlignToVectorfn* AlignToVector;
	tEntityClassfn* EntityClass;
	tCountChildrenfn* CountChildren;
	tGetChildfn* GetChild;
	tGetParentfn* GetParent;
	tEntityParentfn* EntityParent;
	tLoadTexturefn* LoadTexture;
	tEntityTexturefn* EntityTexture;
	tFreeTexturefn* FreeTexture;
	tTFormVectorfn* TFormVector;
	tTFormPointfn* TFormPoint;
	tTFormedXfn* TFormedX;
	tTFormedYfn* TFormedY;
	tTFormedZfn* TFormedZ;
	tEntityNamefn* EntityName;
	tEntityTypefn* EntityType;
	tGetEntityTypefn* GetEntityType;
	tEntityRadiusfn* EntityRadius;
	tSetCollisionMeshfn* SetCollisionMesh;
	tResetEntityfn* ResetEntity;
	tCountCollisionsfn* CountCollisions;
	tCollisionXfn* CollisionX;
	tCollisionYfn* CollisionY;
	tCollisionZfn* CollisionZ;
	tCollisionNXfn* CollisionNX;
	tCollisionNYfn* CollisionNY;
	tCollisionNZfn* CollisionNZ;
	tEntityPickModefn* EntityPickMode;
	tLinePickfn* LinePick;
	tCameraPickfn* CameraPick;
	tPickedXfn* PickedX;
	tPickedYfn* PickedY;
	tPickedZfn* PickedZ;
	tPickedNXfn* PickedNX;
	tPickedNYfn* PickedNY;
	tPickedNZfn* PickedNZ;
	tNameEntityfn* NameEntity;
	tTagEntityfn* TagEntity;
	tEntityTagfn* EntityTag;
	tAnimatingfn* Animating;
	tAnimLengthfn* AnimLength;
	tAnimSeqfn* AnimSeq;
	tAnimTimefn* AnimTime;
	tCopyTexturefn* CopyTexture;
	tFindChildfn* FindChild;
	tFlipMeshfn* FlipMesh;
	tGraphicsHeightfn* GraphicsHeight;
	tGraphicsWidthfn* GraphicsWidth;
	tQueryBoxfn* QueryBox;
	tTextureWidthfn* TextureWidth;
	tTextureHeightfn* TextureHeight;
	tTextureNamefn* TextureName;
	tEntityConstantFloatfn* EntityConstantFloat;
	tEntityConstantFloat2fn* EntityConstantFloat2;
	tEntityConstantFloat3fn* EntityConstantFloat3;
	tEntityConstantFloat4fn* EntityConstantFloat4;
	tGlobalShaderConstantFloat4fn* GlobalShaderConstantFloat4;
	tCalculateB3DTangentsfn* CalculateB3DTangents;
	tCreateLinefn* CreateLine;
	tFreeLinefn* FreeLine;
	tSetLineSizefn* SetLineSize;
	tSetLineColorfn* SetLineColor;
	tSetLineVisiblefn* SetLineVisible;
	tLoadProfilefn* LoadProfile;
	tCreateProfilefn* CreateProfile;
	tFreeProfilefn* FreeProfile;
	tSetProfileRangefn* SetProfileRange;
	tGetProfileRangefn* GetProfileRange;
	tSetProfileEffectfn* SetProfileEffect;
	tGetProfileEffectfn* GetProfileEffect;
	tEntityProfilefn* EntityProfile;
	tCreatePhysicsDescfn* CreatePhysicsDesc;
	tAddSpherefn* AddSphere;
	tAddCapsulefn* AddCapsule;
	tAddBoxfn* AddBox;
	tClosePhysicsDescfn* ClosePhysicsDesc;
	tCameraFogColorfn* CameraFogColor;
	tCameraFogRangefn* CameraFogRange;
	tCameraRangefn* CameraRange;
	tScaleMeshfn* ScaleMesh;
	tCreateMeshfn* CreateMesh;
	tCreateSurfacefn* CreateSurface;
	tAddVertexfn* AddVertex;
	tVertexNormalfn* VertexNormal;
	tAddTrianglefn* AddTriangle;
	tAmbientLightfn* AmbientLight;
	tGetIDirect3DDevice9fn* bbdx2_GetIDirect3DDevice9;
	tbbdx2_GetNxScenefn* bbdx2_GetNxScene;
	tbbdx2_GetNxPhysicsSDKfn* bbdx2_GetNxPhysicsSDK;
};

extern "C" __declspec(dllexport) void* GetBBDXCommandData()
{
	BBDXCommandData* Commands = new BBDXCommandData();

	Commands->ChannelPlaying = &BChannelPlaying;
	Commands->EmitSound = &BEmitSound;
	Commands->PlaySound = &BPlaySound;
	Commands->LoadSound = &BLoadSound;
	Commands->Load3DSound = &BLoad3DSound;
	Commands->PlayMusic = &BPlayMusic;
	Commands->ChannelVolume = &BChannelVolume;
	Commands->FreeSound = &BFreeSound;
	Commands->LoopSound = &BLoopSound;
	Commands->SoundVolume = &BSoundVolume;
	Commands->StopChannel = &BStopChannel;
	Commands->PauseChannel = &BPauseChannel;
	Commands->ResumeChannel = &BResumeChannel;
	Commands->ChannelPan = &BChannelPan;
	Commands->FreeEntity = &getmeshake;
	Commands->MeshWidth = &manonworld;
	Commands->MeshHeight = &jumpin;
	Commands->MeshDepth = &needsleep;
	Commands->CreatePointLight = &copliy;
	Commands->CreateDirectionalLight = &boompx;
	Commands->SetLightPosition = &lovepixels;
	Commands->SetLightDirection = &sukusul;
	Commands->SetLightRadius = &gabbama;
	Commands->SetPLightColor = &hoklig;
	Commands->SetDLightColor = &gonerum;
	Commands->SetPLightActive = &wareflog;
	Commands->SetDLightActive = &klopil;
	Commands->FreePLight = &lipphogg;
	Commands->FreeDLight = &jewnjig;
	Commands->UpdateHardwareBuffers = &jockgnome;
	Commands->CreateCamera = &burryjimpol;
	Commands->LoadMesh = &jalkming;
	Commands->CreatePivot = &carjacking;
	Commands->PositionEntity = &chaosdigs;
	Commands->TranslateEntity = &rzrtool;
	Commands->RotateEntity = &mingja;
	Commands->ScaleEntity = &jaffamak;
	Commands->MoveEntity = &gobstoper;
	Commands->TurnEntity = &moolad;
	Commands->PointEntity = &babygoo;
	Commands->EntityOrder = &chincrank;
	Commands->CameraClsColor = &knowham;
	Commands->EntityFX = &localiva;
	Commands->EntityAlphaNoSolid = &makewow;
	Commands->LoadShader = &deterkis;
	Commands->EntityShader = &slobing;
	Commands->HideEntity = &bumofcow;
	Commands->HideEntityKeepCollisions = &bumofcow2;
	Commands->ShowEntity = &fluxcapa;
	Commands->CopyEntity = &catonbox;
	Commands->EntityX = &jingsu;
	Commands->EntityY = &sostrong;
	Commands->EntityZ = &kisheadgone;
	Commands->EntityScaleX = &tcpwnsall;
	Commands->EntityScaleY = &habaki;
	Commands->EntityScaleZ = &kimono;
	Commands->EntityPitch = &kissme;
	Commands->EntityYaw = &lolatme;
	Commands->EntityRoll = &lambdin;
	Commands->EntityAlpha = &missedit;
	Commands->AlignToVector = &chinook;
	Commands->EntityClass = &setthefire;
	Commands->CountChildren = &mindless;
	Commands->GetChild = &penondesk;
	Commands->GetParent = &earthiswarm;
	Commands->EntityParent = &crystalclear;
	Commands->LoadTexture = &texttodate;
	Commands->EntityTexture = &smokinhot_;
	Commands->FreeTexture = &emokid;
	Commands->TFormVector = &helplost;
	Commands->TFormPoint = &kieransan;
	Commands->TFormedX = &itsnoteasy;
	Commands->TFormedY = &buymebeer;
	Commands->TFormedZ = &firstdance;
	Commands->EntityName = &likeyoumean;
	Commands->EntityType = &bbdx2_EntityType;
	Commands->GetEntityType = &bbdx2_GetEntityType;
	Commands->EntityRadius = &bbdx2_EntityRadius;
	Commands->SetCollisionMesh = &bbdx2_SetCollisionMesh;
	Commands->ResetEntity = &bbdx2_ResetEntity;
	Commands->CountCollisions = &bbdx2_CountCollisions;
	Commands->CollisionX = &bbdx2_CollisionX;
	Commands->CollisionY = &bbdx2_CollisionY;
	Commands->CollisionZ = &bbdx2_CollisionZ;
	Commands->CollisionNX = &bbdx2_CollisionNX;
	Commands->CollisionNY = &bbdx2_CollisionNY;
	Commands->CollisionNZ = &bbdx2_CollisionNZ;
	Commands->EntityPickMode = &bbdx2_EntityPickMode;
	Commands->LinePick = &bbdx2_LinePick;
	Commands->CameraPick = &bbdx2_CameraPick;
	Commands->PickedX = &bbdx2_PickedX;
	Commands->PickedY = &bbdx2_PickedY;
	Commands->PickedZ = &bbdx2_PickedZ;
	Commands->PickedNX = &bbdx2_PickedNX;
	Commands->PickedNY = &bbdx2_PickedNY;
	Commands->PickedNZ = &bbdx2_PickedNZ;
	Commands->NameEntity = &commands;
	Commands->TagEntity = &cones;
	Commands->EntityTag = &ocones;
	Commands->Animating = &brightwork;
	Commands->AnimLength = &grandchild;
	Commands->AnimSeq = &newfangled;
	Commands->AnimTime = &jellygraph;
	Commands->CopyTexture = &pawnbroker;
	Commands->FindChild = &rendering;
	Commands->FlipMesh = &performance;
	Commands->GraphicsHeight = &flight;
	Commands->GraphicsWidth = &simulators;
	Commands->QueryBox = &shelveall;
	Commands->TextureWidth = &releases;
	Commands->TextureHeight = &revelations;
	Commands->TextureName = &onceout;
	Commands->EntityConstantFloat = &EntityConstantFloat;
	Commands->EntityConstantFloat2 = &EntityConstantFloat2;
	Commands->EntityConstantFloat3 = &EntityConstantFloat3;
	Commands->EntityConstantFloat4 = &EntityConstantFloat4;
	Commands->GlobalShaderConstantFloat4 = &GlobalShaderConstantFloat4;
	Commands->CalculateB3DTangents = &CalculateB3DTangents;
	Commands->CreateLine = &CreateLine;
	Commands->FreeLine = &FreeLine;
	Commands->SetLineSize = &SetLineSize;
	Commands->SetLineColor = &SetLineColor;
	Commands->SetLineVisible = &SetLineVisible;
	Commands->LoadProfile = &LoadProfile;
	Commands->CreateProfile = &CreateProfile;
	Commands->FreeProfile = &FreeProfile;
	Commands->SetProfileRange = &SetProfileRange;
	Commands->GetProfileRange = &GetProfileRange;
	Commands->SetProfileEffect = &SetProfileEffect;
	Commands->GetProfileEffect = &GetProfileEffect;
	Commands->EntityProfile = &EntityProfile;
	Commands->CreatePhysicsDesc = &bbdx2_CreatePhysicsDesc;
	Commands->AddSphere = &bbdx2_AddSphere;
	Commands->AddCapsule = &bbdx2_AddCapsule;
	Commands->AddBox = &bbdx2_AddBox;
	Commands->ClosePhysicsDesc = &bbdx2_ClosePhysicsDesc;
	Commands->CameraFogColor = &CameraFogColor;
	Commands->CameraFogRange = &CameraFogRange;
	Commands->CameraRange = &CameraRange;
	Commands->ScaleMesh = &ScaleMesh;
	Commands->CreateMesh = &CreateMesh;
	Commands->CreateSurface = &CreateSurface;
	Commands->AddVertex = &AddVertex;
	Commands->VertexNormal = &groundbreaking;
	Commands->AddTriangle = &AddTriangle;
	Commands->AmbientLight = &qwedfy;
	Commands->bbdx2_GetIDirect3DDevice9 = (BBDXCommandData::tGetIDirect3DDevice9fn*)&bbdx2_GetIDirect3DDevice9;
	Commands->bbdx2_GetNxScene = &bbdx2_GetNxScene;
	Commands->bbdx2_GetNxPhysicsSDK = &bbdx2_GetNxPhysicsSDK;

	return Commands;
}


